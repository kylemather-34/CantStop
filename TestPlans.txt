TEST PLAN - Dice:

In order to meet requirements, we want to ensure that all the requirements are met;
namely that the dice can produce numbers randomly from 1..6. Lastly,
we must ensure that the destructor works for the die. The test for all numbers from 1..6
involves running the program several times and outputting the die values to a text file and
checking that all values were met and inside the proper range. The destructor, if successful,
will not produce any errors upon running the program.

------------------------------------------------------------------------------------------------------

TEST PLAN - Player:

In order to meet requirements for Player, we must ensure the following:
1. The constructor can successfully create an instance of the Player class
with all the proper data members.
2. The color() function can return the test Players' colors.
3. The score() function can return the test Players' scores.
4. The wonColumn() function can return a boolean value according to the column number.
The plan is to create a test Player, call the color() and score() functions and print them to
Output.txt. We will also call the wonColumn() function three times, two of which should return false
and the last should return true.

------------------------------------------------------------------------------------------------------

TEST PLAN - Column:
In order to meet requirements for Column, we must ensure the following:
1. The constructor initializes the column correctly.
2. The state() function returns the correct state of the column.
3. The startTower() function places a tower in a column.
4. The move() function moves a tower within the column.
5. The stop() function ends a player's turn and updates the column correctly.
6. The print() function displays the correct column state.
The getMarkerPositions() function returns the correct marker positions in the column.
The plan is to create a test Column, call all of these functions on it, and print it to both the
console and Output.txt

------------------------------------------------------------------------------------------------------

TEST PLAN - Game:
In order to meet requirements for the Game module, we must ensure the following:

Constructor Initialization:

Verify that the Game constructor correctly initializes all members, including the Dice, Player objects, and Column objects.
Check that the fourDice array is allocated properly and contains valid Dice objects.
Dice Rolling:

Ensure that the roll() function works properly for all dice in the fourDice array.
The dice should return random values between 1 and 6, and the values should be stored in rVal.
Player Initialization:

Confirm that the getNewPlayer() function correctly gathers input from the user and assigns a player name and color.
Validate that the player is initialized with the correct name, color, and score.
Ensure the player input is case-insensitive and defaults to blue when an invalid color is entered.
Column Initialization:

Verify that the Column objects cOne and cTwo are created with the correct number of spaces (2 and 7, respectively).
Ensure that the Column objects correctly initialize their internal state and marker positions.
Tower Placement:

Test the startTower() function by placing a tower in Column 2 (7-length column) and verify that the column state changes as expected.
Ensure the getMarkerPositions() function correctly reflects the updated marker positions after a tower is placed.
Tower Movement:

Confirm that the move() function properly moves a tower within the column.
Verify that the marker positions update accordingly after the tower is moved.
Stopping the Column:

Test the stop() function by ending a player's turn and ensure that the column's state is updated correctly.
Verify that the getMarkerPositions() function returns the correct state after the column is stopped.
Printing Column State:

Test the print() function to ensure that the column's state is correctly printed.
The column state should reflect the final state after all actions (startTower, move, stop) have been performed.
Overall Integration Test:

Integrate all these functionalities in the testGame() function.
Verify that the printed output, including dice rolls, player initialization, column state, tower placement, movement, and stopping, is correct.
Ensure that the output is written to both the console and the "Output.txt" file.
The plan is to create a test Game, call all of these functions, and print the results to both the console and "Output.txt".

------------------------------------------------------------------------------------------------------

TEST PLAN - Board

Objective:

Ensure that the Board class and its interactions with the Game class function correctly. This includes initialization, dice rolling, player setup, column state management, tower placement, movement, stopping, and output verification.

Test Cases:

1. Board Initialization

Objective: Verify that the Board constructor correctly initializes all column objects.

Expected Outcome:

All columns (2-12) should be initialized correctly.

getColumn(i) != nullptr for valid indices.

2. Dice Rolling

Objective: Ensure that the roll() function generates valid dice values.

Expected Outcome:

Each die in game.getDice() rolls a value between 1 and 6.

Values should be stored and retrievable via operator<<.

3. Player Initialization

Objective: Verify that Player objects are initialized correctly.

Expected Outcome:

game.getPlayerOne() and game.getPlayerTwo() should have valid attributes.

print() function outputs the correct player details.

4. Column Initialization

Objective: Validate that the Board columns are initialized properly.

Expected Outcome:

Each column should exist and be in the expected initial state.

5. Tower Placement in Column 7

Objective: Test the startTower() function for a valid column.

Steps:

Call startTower(&game.getPlayerOne()) on column 7.

Retrieve marker positions with getMarkerPositions().

Expected Outcome:

startTower() should return true if successful.

getMarkerPositions() should reflect the initial placement.

6. Tower Movement in Column 7

Objective: Ensure that the move() function operates correctly.

Steps:

Call move() on column 7.

Retrieve updated marker positions.

Expected Outcome:

move() should return true if movement occurs.

getMarkerPositions() should update accordingly.

7. Stopping a Column

Objective: Verify the behavior of stop() function when a column is halted.

Steps:

Call stop(&game.getPlayerOne()) on column 7.

Retrieve marker positions after stopping.

Expected Outcome:

getMarkerPositions() should return the final state after stopping.

8. Column Output Verification

Objective: Validate that the print() function accurately displays column states.

Steps:

Print column 7 state before and after actions (startTower, move, stop).

Compare output in Output.txt.

Expected Outcome:

Column states should match expected results at each stage.

Integration Test

Create a test scenario that runs all these functionalities in sequence.

Validate that the entire board interacts correctly with the game state.

Ensure that all expected results are correctly logged in Output.txt.

Test Execution & Logging

All outputs should be written to Output.txt.

Ensure that console logs match expected outputs.

Review failures and debug accordingly.

------------------------------------------------------------------------------------

TEST PLAN - OneTurn()

Objective:

Ensure that the oneTurn() function operates as intended by managing player actions and their respective colors, handling dice rolls, moving columns with accurate labels, and checking for busts if the total exceeds the limit. Additionally, it should provide players with the option to end their turn. Instead of utilizing a unit test class, the entire functionality is now handled directly within the game class, as it controls all aspects of the game.

Test Cases:

1. Board Initialization

Objective: Verify that the Board constructor correctly initializes all column objects.

Expected Outcome:

All columns (2-12) should be initialized correctly.

getColumn(i) != nullptr for valid indices.

2. Dice Rolling

Objective: Ensure that the roll() function generates valid dice values.

Expected Outcome:

Each die in game.getDice() rolls a value between 1 and 6.

Values should be stored and retrievable via operator<<.

Player choses which dice they want to use.

3. Player Initialization

Objective: Verify that Player objects are initialized correctly.

Expected Outcome:

game.getPlayerOne() and game.getPlayerTwo() should have valid attributes.

print() function outputs the correct player details.

4. Column Initialization

Objective: Validate that the Board columns are initialized properly.

Expected Outcome:

Each column should exist and be in the expected initial state.

5. Tower Placement

Objective: Test the startTower() function for a valid column.

Steps:

Call startTower(&game.getPlayerOne()) in Board Move()

Retrieve marker positions with getMarkerPositions().

Expected Outcome:

startTower() should return true if successful.

Column should be marked correctly when towers are printed.

6. Tower Movement

Objective: Ensure that the move() function operates correctly.

Steps:

Call Board move() that then uses column class to move.

Retrieve updated marker positions.

Expected Outcome:

move() should return true if movement occurs.

getMarkerPositions() should update accordingly.

T should be marked next to pending columns.

7. Stopping a Column

Objective: Verify the behavior of stop() function when a column is halted.

Steps:

Select option 2 â€œ2.stopâ€.

Call stop(&game.getPlayerOne()).

Retrieve marker positions after stopping.

Expected Outcome:

Normal Termination (This is just for now).

8. Column Output Verification

Objective: Validate that the print() function accurately displays column states.

Steps:

Print columns and states when player is done.

Compare output in Output.txt.

Expected Outcome:

Column states should match expected results at each stage.

Integration Test

Create a test scenario that runs all these functionalities in sequence.

Validate that the entire board interacts correctly with the game state.

Ensure that all expected results are correctly logged in Output.txt.

Test Execution & Logging

All outputs should be written to Output.txt.

Ensure that console logs match expected outputs.

Review failures and debug accordingly.

------------------------------------------------------------------------------------------------------------------------

TEST PLAN - PlayerList
Objective:
Ensure that the CList class correctly manages a circular list of Players. The test will validate player addition, removal, re-adding after removal, circular iteration, and printing functionality.

Test Cases:

Adding Players

Objective: Verify that Players can be successfully added to CList.

Steps:

Create four dummy Player objects.

Add them to CList.

Expected Outcome:

The list contains four players.

The order of Players is maintained.

Removing a Player

Objective: Ensure that removing a Player does not break the list.

Steps:

Remove one Player from the list.

Verify that the remaining Players are still linked correctly.

Expected Outcome:

The list contains three Players.

nextPlayer() still progresses correctly.

Removing All Players & Re-adding

Objective: Verify that the list can be emptied and reused.

Steps:

Remove all Players.

Verify that the list is empty.

Add new Players again.

Expected Outcome:

The list becomes empty.

Players can be added again successfully.

Circular Iteration

Objective: Ensure that nextPlayer() correctly cycles through all Players and returns to the starting point.

Steps:

Start from a Player.

Call nextPlayer() repeatedly until the starting Player is reached again.

Expected Outcome:

The iteration loops through all Players correctly.

Printing Players

Objective: Validate the printing functionality for different states of the list.

Steps:

Print an empty CList.

Print CList with 1-4 Players.

Expected Outcome:

Output reflects the correct number of Players in the list.

------------------------------------------------------------------------------------------------------------------------

**TEST PLAN - FakeDice**

**Objective:**
Ensure that the `FakeDice` class correctly reads predetermined dice values from a file, overrides the `roll()` method as expected, and integrates properly with the game mechanics.

---

**Test Cases:**

### 1. File Opening and Validation
**Objective:** Verify that the constructor correctly opens and validates the input file.

**Steps:**
1. Create a valid input file with multiple lines of four dice values and ROLL/STOP commands.
2. Instantiate a `FakeDice` object.
3. Attempt to instantiate a `FakeDice` object with a nonexistent file.

**Expected Outcome:**
- If the file exists, the `FakeDice` object is created successfully.
- If the file does not exist, `fatal()` is triggered, terminating the program.

---

### 2. Reading Dice Rolls
**Objective:** Ensure that `roll()` correctly retrieves values from the file instead of generating random ones.

**Steps:**
1. Create a test file containing predefined sequences of four dice values.
2. Call `roll()` multiple times and check that the returned values match those in the file.
3. Verify that values are stored in the pair-totals array correctly.

**Expected Outcome:**
- `roll()` returns values as per the input file.
- The same sequence is repeated when restarting the program with the same file.

---

### 3. Handling End of File (EOF)
**Objective:** Ensure the program terminates correctly if EOF is reached before the game ends.

**Steps:**
1. Create an input file with only a few lines of dice values.
2. Continue calling `roll()` until the file is exhausted.

**Expected Outcome:**
- The program calls `fatal()` and terminates when attempting to read past the file’s end.

---

### 4. Processing ROLL and STOP Commands
**Objective:** Verify that the game correctly interprets ROLL and STOP instructions.

**Steps:**
1. Construct an input file with alternating ROLL and STOP commands.
2. Ensure that calling `roll()` continues rolling when ROLL is read.
3. Ensure that the turn stops when STOP is read.

**Expected Outcome:**
- The game continues rolling if the command is ROLL.
- The game stops and switches to the next player if the command is STOP.

---

### 5. Integration with `CSDice`
**Objective:** Ensure `FakeDice` behaves consistently as a derived class of `CSDice`.

**Steps:**
1. Instantiate a `FakeDice` object and cast it as `CSDice*`.
2. Call the overridden `roll()` method and ensure it behaves correctly.

**Expected Outcome:**
- `FakeDice` functions properly within any code that expects a `CSDice` object.

---

### 6. Testing Complete Game Flow
**Objective:** Simulate an entire game session using `FakeDice` to validate correctness.

**Steps:**
1. Create an input file with a sequence of rolls leading to a win condition.
2. Run the game with `FakeDice` replacing `CSDice`.
3. Observe if the game progresses correctly according to predefined dice rolls.

**Expected Outcome:**
- The game follows the predetermined rolls and properly transitions turns.
- The game declares a winner when the predefined sequence dictates.

---

### **Conclusion**
This test plan ensures that `FakeDice` functions as intended, correctly reading dice values from a file and supporting controlled game debugging.

------------------------------------------------------------------------------------------------------------------------

TEST PLAN - Exceptions
Objective:
In order to meet requirements, we want to ensure that all exception cases are properly handled; namely that invalid inputs trigger the correct exceptions with appropriate error messages, and that the program continues execution smoothly after handling exceptions.

Test Cases:

Invalid Menu Choice Exception

Procedure: During a player's turn, enter menu choices outside valid range (0, 4, -1, non-numeric)

Expected Result: BadChoice exception thrown with message "Invalid choice: [input]"

Validation: Program reprompts for input without crashing

Invalid Dice Selection Format

Procedure: When prompted for dice pairs, enter:

Single character (e.g., "A")

Three characters (e.g., "ABC")

Non-letter characters (e.g., "12")

Expected Result: BadSlot exception thrown with message "Error: Invalid dice selection ([input])"

Validation: Error message appears on new line, followed by clear reprompt

Duplicate Dice Selection

Procedure: When prompted for dice pairs, enter same letter twice (e.g., "AA")

Expected Result: DuplicateSlot exception thrown with message "Error: You selected the same dice twice ([input])"

Validation: Program displays error and reprompts without terminating

Duplicate Player Name

Procedure: During player setup, enter same name for multiple players (case-insensitive)

Expected Result: BadName exception thrown with message "Player name '[name]' is already in use"

Validation: Program reprompts for new name while preserving other valid inputs

Duplicate Player Color

Procedure: During player setup, select same color for multiple players

Expected Result: BadColor exception thrown with message "Color '[color]' is already taken by another player"

Validation: Program reprompts for new color choice without losing previous valid inputs

Simultaneous Name/Color Conflict

Procedure: Attempt to create player with both duplicate name and color

Expected Result: BadPlayer exception thrown with combined error message

Validation: Program handles compound error and reprompts appropriately

Test Methodology:

Automated test script will:

Inject invalid inputs at each exception point

Capture program output to verify:

Correct exception type thrown

Proper error message format

Appropriate program continuation

Manual testing will verify:

Error message formatting and placement

Console input buffer clearing

Program stability after exceptions

Success Criteria:

All exception cases produce correct error messages on new lines

Program consistently reprompts after exceptions without skipping steps

No memory leaks occur during exception handling

Game state remains valid after handling exceptions

All test cases produce expected results

Additional Validation:

Exception messages should appear between blank lines for readability

Input buffer should be completely cleared after each exception

Program should handle rapid successive errors without crashing

All derived exception classes should maintain proper inheritance behavior

Destructor Validation:

Run program with forced exceptions in all possible states

Verify no memory leaks occur during exception handling

Confirm all resources are properly released when exceptions terminate game early